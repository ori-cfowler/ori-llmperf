import torch
from transformers import pipeline, AutoTokenizer, AutoModelForCausalLM
import os
import time
from typing import Any, Dict
import ray

from llmperf.ray_llm_client import LLMClient
from llmperf.models import RequestConfig
from llmperf import common_metrics


@ray.remote
class Llama2LLMClient(LLMClient):
    """Client for Llama2 Chat Completions"""

    def llm_request(self, request_config: RequestConfig) -> Dict[str, Any]:
        """Make a single completion request to a LLM API

        Returns:
            Metrics about the performance charateristics of the request.
            The text generated by the request to the LLM API.
            The request_config used to make the request. This is mainly for logging purposes.

        """
        max_length = 2048

        access_token = os.environ.get("HF_ACCESS_TOKEN")
        model = "meta-llama/Llama-2-7b-chat-hf"
        tokenizer = AutoTokenizer.from_pretrained(model, token=access_token)
        model = AutoModelForCausalLM.from_pretrained(model, token=access_token)

        prompt = request_config.prompt
        prompt, prompt_len = prompt

        tokens_received = 0
        ttft = 0
        generated_text = ""
        metrics = {}

        metrics[common_metrics.ERROR_CODE] = None
        metrics[common_metrics.ERROR_MSG] = ""

        try:
            input_ids = tokenizer.encode(prompt, return_tensors="pt")
            # Set model to evaluation mode
            model.eval()
            ttft_start_time = time.monotonic()
            with torch.no_grad():
                outputs = model(input_ids=input_ids)
            ttft = time.monotonic() - ttft_start_time

            # Generate the full response
            start_time = time.monotonic()
            with torch.no_grad():
                outputs = model.generate(input_ids, max_length=max_length, pad_token_id=tokenizer.eos_token_id)
            generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)

            total_request_time = time.monotonic() - start_time
            tokens_received = outputs.shape[1]
            output_throughput = tokens_received / total_request_time

        except Exception as e:
            metrics[common_metrics.ERROR_MSG] = str(e)
            print(f"Warning Or Error: {e}")

        metrics[common_metrics.INTER_TOKEN_LAT] = (total_request_time - ttft) / tokens_received
        metrics[common_metrics.TTFT] = ttft
        metrics[common_metrics.E2E_LAT] = total_request_time
        metrics[common_metrics.REQ_OUTPUT_THROUGHPUT] = output_throughput
        metrics[common_metrics.NUM_TOTAL_TOKENS] = tokens_received + prompt_len
        metrics[common_metrics.NUM_OUTPUT_TOKENS] = tokens_received
        metrics[common_metrics.NUM_INPUT_TOKENS] = prompt_len

        return metrics, generated_text, request_config

